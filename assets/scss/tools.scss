@mixin bp($name) {
  @if map-has-key($dialog-breakpoints, $name) {
    @media (#{map-get($dialog-breakpoints, $name)}) {
      @content;
    }
  } @else {
    @error 'there is no breakpoint called #{$name}';
  }
}

@import '~/node_modules/dialog-typography/dist/dialog-typography';

//
// Mixes the base-font-size with a given view-width ratio
//
// $screenWidthRatio: @float [0-1] .1 means 10% of the font size is relative to the browser width
// $designWidth: @int reference resolution, mostly the width of the sketch / photoshop file or the current breakpoint
// $targetPXSize: @int PX value at $designWidth
//
// @return @string calc that mixes VW with %
// because we mix it with % it only works for font-sizes
//
@function screen-ratio-mix(
  $screen-width-ratio: 0.1, // adds 10% of screen-width
  $design-width: 1440, // the target width (artboard width)
  $target-px-size: 10 // target size in PX
) {
  $percent-size: $target-px-size / 16% * 100%;
  @return calc(#{$percent-size - $percent-size * $screen-width-ratio}% + #{$screen-width-ratio * (100 / $design-width) * 10}vw);
}

// sass-lint:disable space-around-operator, mixin-name-format, function-name-format, mixins-before-declarations
/*!
FIRST OF ALL
- CSS grids are great for building the bigger picture. They makes it really easy to manage the layout of the page, and can even handle more unorthodox and asymmetrical designs.
- Flexbox is great at aligning the content inside elements. Use flex to position the smaller details of a design.
- Use CSS grids for 2D layouts (rows AND columns).
- Flexbox works better in one dimension only (rows OR columns).
- There is no reason to use only CSS grids or only flexbox. Learn both and use them together.
CODE EXAMPLES
- zweite, 3. und 4. Spalte
    - grid-column: 2 / span 3
    - grid-column-start: 2; grid-column-end: span 3;
    - grid-column: 2 / 5
- grid-row-start und -end gibt es auch --> alle 5 Zeilen, 1 Spalte Offset und 4 Spalten umfasst
    - grid-row: 1/6; grid-column: 2/6;
- grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end
- order definieren wenn Markup Aufteilung vorgibt
    - order beginnt bei 0
    - darf auch negativ definiert werden z.B. order: -1;
BROWSER SUPPORT
- CSS Grid does not support all browsers
- use width and % for unsupported browsers
*/

// grid cell mixin
@mixin grid__cell($breakpoint-name: null) {
  @each $fraction-key, $fraction-value in $grid-fractions {
    $selector: --#{$fraction-key};

    @if ($breakpoint-name) {
      $selector: --#{$fraction-key}\@#{$breakpoint-name};
    }

    &#{$selector} {
      width: calc(#{$fraction-value * 100% / 10% * (10% - 0.0095%)} - var(--size-gutter-x));
      flex: 0 0 auto;
    }

    &--push#{$selector} {
      margin-left: calc(#{$fraction-value * 100% / 10% * (10% - 0.0095%)} + var(--size-gutter-x));
    }

    &--pull#{$selector} {
      margin-right: calc(#{$fraction-value * 100% / 10% * (10% - 0.0095%)} + var(--size-gutter-x));
    }
  }

  $selector: '--none';

  @if ($breakpoint-name) {
    $selector: --#{'none'}\@#{$breakpoint-name};
  }

  &--push#{$selector} {
    left: 0;
  }

  &--pull#{$selector} {
    right: 0;
  }
}
